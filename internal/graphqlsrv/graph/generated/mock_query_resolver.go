// Code generated by mockery v2.12.0. DO NOT EDIT.

package generated

import (
	context "context"

	model "github.com/huyntsgs/graphql-project/internal/graphqlsrv/graph/model"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockQueryResolver is an autogenerated mock type for the QueryResolver type
type MockQueryResolver struct {
	mock.Mock
}

// Projects provides a mock function with given fields: ctx, last
func (_m *MockQueryResolver) Projects(ctx context.Context, last *int) (*model.Projects, error) {
	ret := _m.Called(ctx, last)

	var r0 *model.Projects
	if rf, ok := ret.Get(0).(func(context.Context, *int) *model.Projects); ok {
		r0 = rf(ctx, last)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Projects)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *int) error); ok {
		r1 = rf(ctx, last)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockQueryResolver creates a new instance of MockQueryResolver. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockQueryResolver(t testing.TB) *MockQueryResolver {
	mock := &MockQueryResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
