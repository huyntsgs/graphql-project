// Code generated by mockery v2.12.0. DO NOT EDIT.

package gitlab

import (
	testing "testing"

	models "github.com/huyntsgs/graphql-project/internal/repositories/models"
	mock "github.com/stretchr/testify/mock"
)

// MockIGitlabRepo is an autogenerated mock type for the IGitlabRepo type
type MockIGitlabRepo struct {
	mock.Mock
}

// GetLastProjectsInfo provides a mock function with given fields: n
func (_m *MockIGitlabRepo) GetLastProjectsInfo(n int) (*models.GetNodeResponse, error) {
	ret := _m.Called(n)

	var r0 *models.GetNodeResponse
	if rf, ok := ret.Get(0).(func(int) *models.GetNodeResponse); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIGitlabRepo creates a new instance of MockIGitlabRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIGitlabRepo(t testing.TB) *MockIGitlabRepo {
	mock := &MockIGitlabRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
